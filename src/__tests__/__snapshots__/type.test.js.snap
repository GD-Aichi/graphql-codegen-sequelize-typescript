// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';
import { DescriptionModel } from '../description.type';

import { Description } from './description.type';


export interface Address {
  id: number;
  description?: Description;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @Column
  public descriptionId: number;

  @BelongsTo(() => DescriptionModel, 'descriptionId')
  public description: DescriptionModel;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo 2`] = `
"/* tslint:disable */



export interface Description {
  text?: string;
}


"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo with foreignKey 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';
import { DescriptionModel } from '../description.type';

import { Description } from './description.type';


export interface Address {
  id: number;
  description?: Description;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @Column
  public descriptionTestId: number;

  @BelongsTo(() => DescriptionModel, 'descriptionTestId')
  public description: DescriptionModel;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo with foreignKey 2`] = `
"/* tslint:disable */



export interface Description {
  text?: string;
}


"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo with foreignKey 3`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';
import { DescriptionModel } from '../description.type';
import { AddressDescriptionModel } from '../addressDescription.type';

import { Description } from './description.type';


export interface Address {
  id: number;
  description?: Description[];
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @BelongsToMany(() => DescriptionModel, () => AddressDescriptionModel, 'addressId', 'descriptionId')
  public description: DescriptionModel[];
}

export class AddressDescriptionDB<T> extends IdEntityModel<T> {
  @PrimaryKey
  @Column
  public addressId: number;

  @BelongsTo(() => AddressModel, 'addressId')
  public address: AddressModel;

  @PrimaryKey
  @Column
  public descriptionId: number;

  @BelongsTo(() => DescriptionModel, 'descriptionId')
  public description: DescriptionModel;
}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo with foreignKey 4`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { DescriptionModel } from '../description.type';
import { AddressModel } from '../address.type';
import { AddressDescriptionModel } from '../addressDescription.type';

import { Address } from './address.type';


export interface Description {
  text?: string;
  Address?: Address[];
}


const loader: ILoaders<DataLoader<number | string, DescriptionModel>>[] = [];

export class DescriptionDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, DescriptionModel>>[] = loader;

  @BelongsToMany(() => AddressModel, () => AddressDescriptionModel, 'descriptionId', 'addressId')
  public Address: AddressModel[];
}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo with foreignKey, foreignKey and otherKey 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';
import { DescriptionModel } from '../description.type';
import { AddressDescriptionModel } from '../addressDescription.type';

import { Description } from './description.type';


export interface Address {
  id: number;
  description?: Description[];
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @BelongsToMany(() => DescriptionModel, () => AddressDescriptionModel, 'addressTestId', 'descriptionTestId')
  public description: DescriptionModel[];
}

export class AddressDescriptionDB<T> extends IdEntityModel<T> {
  @PrimaryKey
  @Column
  public addressTestId: number;

  @BelongsTo(() => AddressModel, 'addressTestId')
  public address: AddressModel;

  @PrimaryKey
  @Column
  public descriptionTestId: number;

  @BelongsTo(() => DescriptionModel, 'descriptionTestId')
  public description: DescriptionModel;
}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive BelongsTo with foreignKey, foreignKey and otherKey 2`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { DescriptionModel } from '../description.type';
import { AddressModel } from '../address.type';
import { AddressDescriptionModel } from '../addressDescription.type';

import { Address } from './address.type';


export interface Description {
  text?: string;
  Address?: Address[];
}


const loader: ILoaders<DataLoader<number | string, DescriptionModel>>[] = [];

export class DescriptionDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, DescriptionModel>>[] = loader;

  @BelongsToMany(() => AddressModel, () => AddressDescriptionModel, 'descriptionTestId', 'addressTestId')
  public Address: AddressModel[];
}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive Column 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';



export interface Address {
  id: number;
  name?: string;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @Column
  public name: string;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive Column with dataType 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';



export interface Address {
  id: number;
  name?: string;
  description?: string;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @Column
  public name: string;

  @Column(DataType.TEXT)
  public description: string;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive HasMany with foreignKey 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';
import { DescriptionModel } from '../description.type';

import { Description } from './description.type';


export interface Address {
  id: number;
  description?: Description[];
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

  @BelongsTo(() => DescriptionModel, 'addressId')
  public description: DescriptionModel;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive HasMany with foreignKey 2`] = `
"/* tslint:disable */

import { Address } from './address.type';


export interface Description {
  text?: string;
  addressId?: Address;
}


"
`;

exports[`Multiple Files Schema should generate the correct types when directive cacheControl on field 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';

import { addressBynameLoader } from './loaders';


export interface Address {
  id: number;
  name?: string;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];
loader.push({ 'name': addressBynameLoader });

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive cacheControl on field with maxAge and maxItems 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';

import { addressBynameLoader } from './loaders';


export interface Address {
  id: number;
  name?: string;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];
loader.push({ 'name': addressBynameLoader });

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive cacheControl on object 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';

import { addressByIdLoader } from './loaders';


export interface Address {
  id: number;
  name?: string;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];
loader.push({ id: addressByIdLoader });

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive cacheControl on object with maxAge and maxItems 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';

import { addressByIdLoader } from './loaders';


export interface Address {
  id: number;
  name?: string;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];
loader.push({ id: addressByIdLoader });

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when directive entity 1`] = `
"/* tslint:disable */
import {Model, BelongsTo, Column, IsUUID, PrimaryKey, HasMany, BelongsToMany, DataType} from 'sequelize-typescript';
import {IdEntityModel, ILoaders} from '../core/IdEntityModel';
import * as DataLoader from 'dataloader';
import { AddressModel } from '../address.type';



export interface Address {
  id: number;
}


const loader: ILoaders<DataLoader<number | string, AddressModel>>[] = [];

export class AddressDB<T extends Model<T>> extends IdEntityModel<T> {

  static loader: ILoaders<DataLoader<number | string, AddressModel>>[] = loader;

}
"
`;

exports[`Multiple Files Schema should generate the correct types when using only simple Query 1`] = `
"/* tslint:disable */



export interface Address {
  id: number;
}


"
`;
